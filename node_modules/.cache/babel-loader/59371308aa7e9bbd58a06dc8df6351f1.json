{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\User\\\\scoreboardextra\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\scoreboardextra\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\User\\\\scoreboardextra\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\User\\\\scoreboardextra\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\User\\\\scoreboardextra\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\scoreboardextra\\\\src\\\\components\\\\Stopwatch.js\";\nimport React, { Component } from 'react';\n\nvar Stopwatch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Stopwatch, _Component);\n\n  function Stopwatch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Stopwatch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Stopwatch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isRunning: false,\n      elapsedTime: 0,\n      previousTime: 0\n    };\n\n    _this.tick = function () {\n      if (_this.state.isRunning) {\n        console.log('Ticking...');\n        var now = Date.now();\n\n        _this.setState(function (prevState) {\n          return {\n            previousTime: now,\n            elapsedTime: prevState.elapsedTime + (now - prevState.previousTime)\n          };\n        });\n      }\n    };\n\n    _this.handleStopwatch = function () {\n      _this.setState(function (prevTime) {\n        return {\n          isRunning: !prevTime.isRunning\n        };\n      });\n\n      if (!_this.state.isRunning) {\n        _this.setState({\n          previousTime: Date.now()\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Stopwatch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log('stopwatch mounted....');\n      this.intervalID = setInterval(function () {\n        _this2.tick();\n      }, 100);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"stopwatch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Stopwatch\"), React.createElement(\"span\", {\n        className: \"stopwatch-time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, Math.floor(this.state.elapsedTime / 1000)), React.createElement(\"button\", {\n        onClick: this.handleStopwatch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, this.state.isRunning ? 'Stop' : 'Start'), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Reset\"));\n    }\n  }]);\n\n  return Stopwatch;\n}(Component);\n\nexport default Stopwatch;","map":{"version":3,"sources":["C:\\Users\\User\\scoreboardextra\\src\\components\\Stopwatch.js"],"names":["React","Component","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","console","log","now","Date","setState","prevState","handleStopwatch","prevTime","intervalID","setInterval","Math","floor"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;IAEMC,S;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,SAAS,EAAG,KADR;AAEJC,MAAAA,WAAW,EAAE,CAFT;AAGJC,MAAAA,YAAY,EAAE;AAHV,K;;UAURC,I,GAAO,YAAM;AACT,UAAG,MAAKJ,KAAL,CAAWC,SAAd,EAAwB;AACpBI,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,YAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AACA,cAAKE,QAAL,CAAe,UAAAC,SAAS;AAAA,iBAAK;AACzBP,YAAAA,YAAY,EAAEI,GADW;AAEzBL,YAAAA,WAAW,EAAEQ,SAAS,CAACR,WAAV,IAAyBK,GAAG,GAAGG,SAAS,CAACP,YAAzC;AAFY,WAAL;AAAA,SAAxB;AAMH;AACJ,K;;UACDQ,e,GAAkB,YAAM;AACpB,YAAKF,QAAL,CAAe,UAAAG,QAAQ;AAAA,eAAK;AACxBX,UAAAA,SAAS,EAAG,CAACW,QAAQ,CAACX;AADE,SAAL;AAAA,OAAvB;;AAIA,UAAG,CAAC,MAAKD,KAAL,CAAWC,SAAf,EAAyB;AACrB,cAAKQ,QAAL,CAAe;AAAEN,UAAAA,YAAY,EAAEK,IAAI,CAACD,GAAL;AAAhB,SAAf;AACH;AACJ,K;;;;;;;wCAxBkB;AAAA;;AACfF,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,WAAKO,UAAL,GAAkBC,WAAW,CAAC,YAAM;AAAC,QAAA,MAAI,CAACV,IAAL;AAAY,OAApB,EAAqB,GAArB,CAA7B;AACH;;;6BAsBQ;AACL,aACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI;AAAM,QAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKW,IAAI,CAACC,KAAL,CAAW,KAAKhB,KAAL,CAAWE,WAAX,GAAyB,IAApC,CADL,CAFJ,EAKI;AAAQ,QAAA,OAAO,EAAE,KAAKS,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKX,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAA+B,OADpC,CALJ,EAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARJ,CADJ;AAYH;;;;EA7CmBH,S;;AAgDxB,eAAeC,SAAf","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Stopwatch extends Component {\r\n    state = {\r\n        isRunning : false,\r\n        elapsedTime: 0,\r\n        previousTime: 0\r\n    }\r\n    \r\n    componentDidMount(){\r\n        console.log('stopwatch mounted....');\r\n        this.intervalID = setInterval(() => {this.tick()},100)\r\n    }\r\n    tick = () => {\r\n        if(this.state.isRunning){\r\n            console.log('Ticking...');\r\n            const now = Date.now();\r\n            this.setState( prevState => ({\r\n                previousTime: now,\r\n                elapsedTime: prevState.elapsedTime + (now - prevState.previousTime)\r\n            })\r\n            );\r\n\r\n        }\r\n    }\r\n    handleStopwatch = () => {\r\n        this.setState( prevTime => ({\r\n            isRunning : !prevTime.isRunning\r\n        })\r\n        );\r\n        if(!this.state.isRunning){\r\n            this.setState( { previousTime: Date.now() });\r\n        }\r\n    }\r\n    render (){\r\n        return(\r\n            <div className=\"stopwatch\">\r\n                <h2>Stopwatch</h2>\r\n                <span className=\"stopwatch-time\">\r\n                    {Math.floor(this.state.elapsedTime / 1000)}\r\n                </span>\r\n                <button onClick={this.handleStopwatch}>\r\n                    {this.state.isRunning ? 'Stop': 'Start'}\r\n                </button>\r\n                <button>Reset</button>                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Stopwatch;"]},"metadata":{},"sourceType":"module"}